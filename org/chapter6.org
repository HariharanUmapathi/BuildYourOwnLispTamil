* அத்தியாயம் 6 - பாகுபடுத்துதல் (Parsing)

** போலிஷ் குறிமான முறை (Polish Notation)

mpc முயற்சிக்க, நாம் லிஸ்ப்பின் கணித துணைக்குழுவை (subset) ஒத்திருந்த எளிய
இலக்கணத்தை செயல்படுத்தப் போகிறோம். இது [[http://en.wikipedia.org/wiki/Polish_notation][போலிஷ் குறிமான முறை]] என்று அழைக்கப்படுகிறது,
மேலும் இது இயக்கி (operator) செயல்பாட்டிற்கு (operands) முன் வரும்
எண்கணிதத்திற்கான குறிப்பு.

உதாரணத்திற்கு...

| 1 + 2 + 6          | is | + 1 2 6            |
| 6 + (2 * 9)        | is | + 6 (* 2 9)        |
| (10 * 2) / (4 + 2) | is | / (* 10 2) (+ 4 2) |

இந்த குறிப்பை விவரிக்கும் இலக்கணத்தை நாம் உருவாக்க வேண்டும். நாம் அதை உரையாக
(text) விவரிப்பதன் மூலம் தொடங்கலாம், பின்னர் நம் எண்ணங்களை முறைப்படுத்தலாம்.


தொடங்குவதற்கு, போலிஷ் குறிப்பிடில் செயலி (operator) எப்போதும் கோவையில்
(expression) முதலில் வருவதையும், அதைத் தொடர்ந்து அடைப்புக்குறிக்குள்
(parentheses) எண்கள் அல்லது பிற கோவை வருவதையும் நாம் பார்க்கலாம். இதன் பொருள்
"ஒரு நிரல் ஒரு செயலியைத் தொடர்ந்து ஒன்று அல்லது அதற்கு மேற்பட்ட கோவைகள்" என்று
கூறலாம், இதில் "ஒரு கோவை என்பது ஒரு எண் (number), அல்லது, அடைப்புக்குறிக்குள்,
ஒரு செயலியைத் தொடர்ந்து ஒன்று அல்லது அதற்கு மேற்பட்ட கோவைகள்" என்று கூறலாம்.

மேலும் முறைப்படி...


| Program    - நிரல்    | உள்ளீட்டின் தொடக்கத்தில், ஒரு செயலி (Operator), ஒன்று அல்லது அதற்கு மேற்பட்ட கோவை (Expression), மற்றும் முடிவில் உள்ளீடு. |
| Expression - கோவை | ஒரு எண் அல்லது '(', ஒரு செயலி, ஒன்று அல்லது அதற்கு மேற்பட்ட கோவை, மற்றும் ஒரு ')'.                                 |
| Operator   - செயலி  | '+', '-', '*', or '/'.                                                                                             |
| Number     -  எண்   | ஒரு விருப்பத்தேர்வு -, மற்றும் ஒன்று அல்லது அதற்கு மேற்பட்ட 0 மற்றும் 9 க்கு இடையில் உள்ள மதிப்புகள்                          |


** சுருங்குறித்தொடர் (Regular Expression)
ஏற்கனவே தெரிந்த விஷயங்களைப் பயன்படுத்தி மேலே உள்ள பெரும்பாலான விதிகளை
குறியாக்கம் செய்ய முடியும், ஆனால் எண் (Number) மற்றும் நிரல் (Program) சில
சிக்கலை ஏற்படுத்தக்கூடும். இந்த இரன்டையும் எப்படி வெளிப்படுத்துவது என்று இன்னும் நாம்
கற்றுக் கொள்ளவில்லை. உள்ளீட்டின் தொடக்கம் அல்லது எழுத்துகளின் வரம்பை எவ்வாறு
வெளிப்படுத்துவது என்பது நமக்கு தெரியாது.

இவற்றை வெளிப்படுத்தலாம், ஆனால் அவற்றுக்கு சுருங்குறித்தொடர் என்று ஒன்று
தேவைப்படுகிறது. சுருங்குறித்தொடர் என்பது சொற்கள் அல்லது எண்கள் போன்ற சிறிய
பகுதிகளுக்கு இலக்கணங்களை எழுதும் ஒரு வழியாகும். சுருங்குறித்தொடர்களைப்
பயன்படுத்தி எழுதப்பட்ட இலக்கணங்கள் பல விதிகளைக் கொண்டிருக்க முடியாது, ஆனால் அவை
பொருந்தக்கூடியவை மற்றும் பொருந்தாதவை பற்றிய துல்லியமான மற்றும் சுருக்கமான
கட்டுப்பாட்டைக் கொடுக்கின்றன. சுருங்குறித்தொடர் எழுதுவதற்கு சில அடிப்படை விதிகள்.

| .        | எதாவுது எழுத்து வேண்டும்.                        |
| a        | அ என்ற எழுத்து வேண்டும்.                       |
| [abcdef] | abcdef தொகுப்பில் எந்த எழுத்தும் வேண்டும்.        |
| [a-f]    | a முதல் f வரை உள்ள எந்த எழுத்தும் வேண்டும்       |
| a?       | a எழுத்து விருப்பமானது (optional).               |
| a*       | பூஜ்ஜியம் அல்லது அதற்கு மேற்பட்ட a எழுத்து தேவை. |
| a+       | ஒன்று அல்லது அதற்கு மேற்பட்ட a எழுத்துகள் தேவை. |
| \^       | உள்ளீட்டின் தொடக்கம் தேவை.                     |
| \$       | உள்ளீட்டின் முடிவு தேவை.                         |


இவையெல்லாம் இப்போது நமக்குத் தேவையான சுருங்குறித்தொடர்
விதிகள். சுருங்குறித்தொடர்கள் கற்றல் குறித்து முழு நூல்களும்
எழுதப்பட்டுள்ளன. ஆர்வமுள்ளவர்களுக்கு மேலும் தகவல்களை இணையத்தில் அல்லது இந்த
'ஆதாரங்களில்' காணலாம். அடுத்த அத்தியாயங்களில் அவற்றைப் பயன்படுத்துவோம், எனவே சில
அடிப்படை அறிமுகம் தேவைப்படும், ஆனால் நீங்கள் தற்போதைக்கு அதில் குருவாக மாற
வேண்டியதில்லை.

mpc இலக்கணத்தில் சுருங்குறித்தொடர்களை முன்னோக்கி சாய்வுகளுக்கு (forward slashes)
இடையில் வைத்து எழுதுகிறோம். மேலே உள்ள வழிகாட்டியைப் பயன்படுத்தி நாம் எண் விதியை
/-?[0-9]+/ என்ற சரத்தைப் பயன்படுத்தி சுருங்குறித்தொடர் என வெளிப்படுத்தலாம்.

** MPC ஐ நிறுவுதல் (Installing mpc)

இந்த இலக்கணத்தை எழுதுவதற்கு முன், நாம் முதலில் mpc தலைப்புகளைச் சேர்க்க வேண்டும்,
பின்னர் லினக்ஸ் மற்றும் மேக் இல் Editline போலவே mpc நூலகத்துடன் இணைக்க (link)
வேண்டும். அத்தியாயம் 4 இலிருந்து உங்கள் குறியீட்டில் தொடங்கி, நீங்கள் கோப்பை (file)
parsing.c என மறுபெயரிடலாம் (rename) மற்றும் mpc repo இலிருந்து mpc.h மற்றும்
mpc.c ஐப் பதிவிறக்கலாம். உங்கள் மூல கோப்பின் (source file) அதே கோப்பகத்தில்
(folder) இவற்றை வைக்கவும்.

mpc ஐ சேர்க்க கோப்பின் மேலே #include "mpc.h" ஐ வைக்கவும். mpc உடன் இணைக்க
mpc.c ஐ நேரடியாக நிரல்மொழிமாற்ற கட்டளையில் வைக்கவும். லினக்ஸில் நீங்கள் -lm ஐ
கொடி சேர்ப்பதன் மூலம் கணித நூலகத்துடன் (math library) இணைக்க வேண்டும்.

லினக்ஸ் மற்றும் மேக்கில்

#+begin_src shell
  cc -std=c99 -Wall parsing.c mpc.c -ledit -lm -o parsing
#+end_src

விண்டோஸில்

#+begin_src shell
  cc -std=c99 -Wall parsing.c mpc.c -o parsing
#+end_src

ஒரு நிமிடம், #include <mpc.h> என்று நீங்கள் எழுதவில்லையா ?

C இல் கோப்புகளைச் (file) சேர்க்க உண்மையில் இரண்டு வழிகள் உள்ளன. ஒன்று நாம் இதுவரை
பார்த்தபடி <> கோண அடைப்புக்குறிகளைப் (angular brackets) பயன்படுத்துகிறது,
மற்றொன்று மேற்கோள் குறிகளுடன் (quotation marks) "".

இரண்டிற்கும் இடையே உள்ள ஒரே வித்தியாசம் என்னவென்றால், கோண அடைப்புக்குறிகளைப்
பயன்படுத்தி முதலில் தலைப்புகளுக்கான அமைப்பு இருப்பிடங்களைத் (system location)
தேடுகிறது, அதே சமயம் மேற்கோள் குறிகள் தற்போதைய கோப்பகத்தை (current directory)
முதலில் தேடும். இந்த அமைப்பின் காரணமாக, <stdio.h> போன்ற தலைப்புகள் பொதுவாக கோண
அடைப்புக்குறிக்குள் வைக்கப்படுகின்றன, அதே நேரத்தில் "mpc.h" போன்ற உள்ளூர் தலைப்புகள்
பொதுவாக மேற்கோள் குறிகளில் வைக்கப்படுகின்றன.

** போலிஷ் குறிமான முறை இலக்கணம் (Polish Notation Grammar)

மேற்கூறிய விதிகளை மேலும் முறைப்படுத்தி, சில சுருங்குறித்தொடர்களைப் பயன்படுத்தி,
போலிஷ் குறிமான முறை மொழிக்கான இறுதி இலக்கணத்தை பின்வருமாறு எழுதலாம். கீழே உள்ள
குறியீட்டைப் படித்து, அது நாம் உரையாக எழுதியதற்கும், போலிஷ் குறிமான முறை பற்றிய
நம் யோசனைகளுக்கும் பொருந்துகிறதா என்பதைச் சரிபார்க்கவும்.

#+begin_src c
  /* சில பாகுபடுத்திகளை (parsers) உருவாக்க */
  mpc_parser_t* Number   = mpc_new("number");
  mpc_parser_t* Operator = mpc_new("operator");
  mpc_parser_t* Expr     = mpc_new("expr");
  mpc_parser_t* Lispy    = mpc_new("lispy");
  
  /* பின்வரும் மொழி மூலம் அவற்றை வரையறுக்கவும் */
  mpca_lang(MPCA_LANG_DEFAULT,
    "                                                     \
      number   : /-?[0-9]+/ ;                             \
      operator : '+' | '-' | '*' | '/' ;                  \
      expr     : <number> | '(' <operator> <expr>+ ')' ;  \
      lispy    : /^/ <operator> <expr>+ /$/ ;             \
    ",
    Number, Operator, Expr, Lispy);
  
#+end_src


இதை நாம் அத்தியாயம் 4ல் தொடங்கிய கலந்துரையாடல் தூண்டியில் (Interactive prompt)
சேர்க்க வேண்டும். இந்த குறியீட்டை முதன்மை (main) செயல்பாட்டின் (function)
தொடக்கத்தில் வைக்கவும், ~print the Version and Exit information~ முன்
வைக்கவும். நம் நிரலின் முடிவில், பாகுபடுத்திகளை பயன்படுத்தி முடித்ததும் அவற்றை
நீக்க வேண்டும். முதன்மை திரும்புவதற்கு (return) முன், பின்வரும் தூய்மைப்படுத்தல்
(clean up) குறியீட்டை வைக்க வேண்டும்.

#+begin_src c
  /* பாகுபடுத்திகளை வரையறுக்கப்படாதாக (undefine) மற்றி நீக்கவும் */
  mpc_cleanup(4, Number, Operator, Expr, Lispy);
#+end_src

- `mpc_lang' க்கு வரையறுக்கப்படவில்லை என்று ஒரு பிழையைப் பெறுகிறேன் ?
  - அது mpca_lang ஆக இருக்க வேண்டும், mpc இறுதியில் ஒரு ~a~

** பயனர் உள்ளீட்டைப் பாகுபடுத்துதல் (Parsing User Input)

நம்முடைய புதிய குறியீடு நமக்கு போலிஷ் குறிமான முறை மொழிக்கான mpc
பாகுபடுத்தியை உருவாக்குகிறது, ஆனால் தூண்டி (prompt) இருந்து ஒவ்வொரு முறையும்
வழங்கப்படும் பயனர் உள்ளீட்டில் அதை கண்டிப்பாக பயன்படுத்த வேண்டும். பயனர் உள்ளீட்டை மீண்டும்
எதிரொலிப்பதற்குப் பதிலாக, நம் பாகுபடுத்தியைப் பயன்படுத்தி உள்ளீட்டைப் பாகுபடுத்த
முயற்சிக்கும் வகையில், நமது வரை சுழற்சியை (while loop) திருத்த
வேண்டும். பின்வரும் mpc குறியீட்டைக் கொண்டு printf க்கு அழைப்பை மாற்றுவதன் மூலம்
இதைச் செய்யலாம், இது நமது நிரல் பாகுபடுத்தி Lispy ஐப் பயன்படுத்துகிறது.

#+begin_src c
  /* பயனர் உள்ளீட்டைப் பாகுபடுத்த முயற்சி */
  mpc_result_t r;
  if (mpc_parse("<stdin>", input, Lispy, &r)) {
    /* வெற்றியில் AST ஐ அச்சிடவும் */
    mpc_ast_print(r.output);
    mpc_ast_delete(r.output);
  } else {
    /* இல்லையெனில் பிழையை அச்சிடுக */
    mpc_err_print(r.error);
    mpc_err_delete(r.error);
  }
#+end_src

இந்தக் குறியீடு mpc_parse செயல்பாட்டை அழைக்கிறது அதில் பாகுபடுத்தி Lispy மற்றும்
உள்ளீடு சரம் ~input~ சேர்ந்து செல்கிறது. அது பாகுபாட்டின் முடிவை r ஆக
நகலெடுக்கிறது மற்றும் வெற்றியில் 1 மற்றும் தோல்வியில் 0 ஐ
வழங்குகிறது. செயல்பாட்டிற்கு அனுப்பும்போது செயலி (Operator) & மூலம் r இன்
முகவரியைப் பயன்படுத்துகிறோம். இந்த செயலி (Operator) அடுத்த அத்தியாயங்களில்
இன்னும் விரிவாக விளக்கப்படும்.

வெற்றியின் போது புல வெளியீட்டின் (field output) உள் கட்டமைப்பு (internal
structure) ~r~ இல் நகலெடுக்கப்படுகிறது. அந்த கட்டமைப்பை mpc_ast_print ஐப்
பயன்படுத்தி அச்சிடலாம் மற்றும் mpc_ast_delete ஐப் பயன்படுத்தி அதை நீக்கலாம்.

இல்லையெனில் ஒரு பிழை உள்ளது என்றால் இது புலப் பிழையில் (field error) r இல்
நகலெடுக்கப்படுகிறது. நாம் அதை mpc_err_print ஐப் பயன்படுத்தி அச்சிடலாம் மற்றும்
mpc_err_delete ஐப் பயன்படுத்தி நீக்கலாம்.

இந்த புதுப்பிப்புகளைத் நிரல்மொழிமாற்றி, இந்த நிரலை இயக்க பார்க்கவும். வெவ்வேறு
உள்ளீடுகளை முயற்சி செய்து, கணினி எவ்வாறு செயல்படுகிறது என்பதைப்
பார்க்கவும். சரியான நடத்தை பின்வருமாறு இருக்க வேண்டும்.

#+begin_example
  Lispy Version 0.0.0.0.2
  Press Ctrl+c to Exit
  
  lispy> + 5 (* 2 2)
  >
    regex
    operator|char:1:1 '+'
    expr|number|regex:1:3 '5'
    expr|>
      char:1:5 '('
      operator|char:1:6 '*'
      expr|number|regex:1:8 '2'
      expr|number|regex:1:10 '2'
      char:1:11 ')'
    regex
  lispy> hello
  <stdin>:1:1: error: expected whitespace, '+', '-', '*' or '/' at 'h'
  lispy> / 1dog
  <stdin>:1:4: error: expected one of '0123456789', whitespace, '-', one or more of one of '0123456789', '(' or end of input at 'd'
  lispy>
#+end_example

- நான் ஒரு பிழையைப் சந்திக்கிறேன் <stdin>:1:1: error: Parser Undefined!.
  - mpca_lang க்கு வழங்கப்பட்ட உங்கள் இலக்கணத்திற்கான தொடரியல் (syntax) தவறாக
    இருப்பதால் இந்தப் பிழை ஏற்பட்டது. இலக்கணத்தின் எந்தப் பகுதி தவறானது என்பதை
    உங்களால் கண்டுபிடிக்க முடியுமா என்று பார்க்கவும். இதைக் கண்டறியவும், இலக்கணம்
    எப்படி இருக்க வேண்டும் என்பதைச் சரிபார்க்கவும் இந்த அத்தியாயத்திற்கான குறிப்புக்
    (reference) குறியீட்டைப் பார்க்கலாம்.

** வெகுமதி மதிப்பெண் (Bonus Marks)
- aababa அல்லது bbaa போன்ற அனைத்து a அல்லது b இன் சுருங்குறித்தொடர் பொருந்தும் சரங்களை எழுதவும்.
- ababab அல்லது aba போன்ற தொடர்ச்சியான a மற்றும் b ஆகியவற்றின் சுருங்குறித்தொடர் பொருந்தும் சரங்களை எழுதவும்.
- சுருங்குறித்தொடர் பொருந்தும் pit, pot and respite ஆனால் peat, spit, அல்லது part வேண்டாம்.
- % போன்ற புதிய செயலி (Operator) சேர்க்க இலக்கணத்தை மாற்றவும்.
- உரை வடிவத்தில் எழுதப்பட்ட add, sub, mul, div செயலி(Operator) அடையாளம் காண இலக்கணத்தை மாற்றவும்.
- 0.01, 5.21 அல்லது 10.2 போன்ற தசம (Decimal) எண்களை அடையாளம் காண இலக்கணத்தை மாற்றவும்.
- செயலி(Operator) இரண்டு வெளிப்பாடுகளுக்கு (expressions) இடையில் வழக்கமாக எழுதுவதற்கு இலக்கணத்தை மாற்றவும்.
- Doge ஐ பகுபடுத்துவதற்கு முந்தைய அத்தியாயத்தின் இலக்கணத்தைப் பயன்படுத்தவும். உள்ளீட்டின் தொடக்கத்தையும் முடிவையும் நீங்கள் சேர்க்க வேண்டும்.

