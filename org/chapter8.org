* அத்தியாயம் 8 - பிழை கையாளுதல் (Error Handling)

** செயல் இழந்தல் (Crashes)

உங்களில் சிலர் முந்தைய அத்தியாயத்தின் திட்டத்தில் சிக்கலைக்
கவனித்திருக்கலாம். தூண்டியில் (prompt) இதை உள்ளிட்டு செய்தால் என்ன நடக்கிறது என்று
பார்க்கவும்.

#+begin_example
Lispy Version 0.0.0.0.3
Press Ctrl+c to Exit

lispy> / 10 0
#+end_example

ஐயோ. பூஜ்ஜியத்தால் வகுக்க முயன்றபோது நிரல் செயலிழந்தது. உருவாக்கத்தின்
(development) போது ஒரு நிரல் செயலிழந்தால் பரவாயில்லை, ஆனால் இறுதி நிரல்
ஒருபோதும் செயலிழக்காது என்று நம்புவோம், மேலும் என்ன தவறு நடந்தது என்பதை எப்போதும்
பயனருக்கு விளக்க வேண்டும்.

இந்த நேரத்தில், நம் நிரல் தொடரியல் பிழைகளை (syntax errors) உருவாக்க முடியும்,
ஆனால் வெளிப்பாடுகளின் (expression) மதிப்பீட்டில் பிழைகளைப் புகாரளிப்பதற்கான
செயல்பாடு இன்னும் இல்லை. இதைச் செய்ய, சில வகையான பிழை கையாளுதல் செயல்பாட்டை நாம்
உருவாக்க வேண்டும். இது சி இல் எழுத மோசமானதாக இருக்கலாம், ஆனால் நாம் சரியான
பாதையில் தொடங்கினால், நமது நிரல் மிகவும் சிக்கலானதாக இருக்கும் போது அது
பலனளிக்கும்.

சி நிரல்கள் செயலிழப்பது fact of life என்பார்கள். ஏதேனும் தவறு நடந்தால்
இயங்கு தளம் அவர்களை வெளியேற்றிவிடும். நிரல்கள் பல்வேறு காரணங்களுக்காக மற்றும்
பல்வேறு வழிகளில் செயலிழக்கக்கூடும்.

ஆனால் சி நிரல்கள் எவ்வாறு செயல்படுகின்றன என்பதில் எந்த மந்திரமும் இல்லை. நீங்கள்
மிகவும் தொந்தரவான பிழையை எதிர்கொண்டால், கைவிடாதீர்கள் அல்லது உங்கள் கண்களில் இரத்தம்
வரும் வரை உட்கார்ந்து திரையை வெறித்துப் பார்க்காதீர்கள். gdb மற்றும் valgrind ஐ
எவ்வாறு பயன்படுத்துவது என்பதை சரியாக அறிய இந்த வாய்ப்பைப் பயன்படுத்தவும். இவை
உங்கள் கருவிப் பெட்டியில் ஒரு மதிப்புமிக்க ஆயுதங்களாக இருக்கும், மேலும் இந்த
கருவிகள் ஆரம்ப கற்றலுக்குப் பிறகு, உங்களுக்கு நிறைய நேரத்தையும் வலியையும்
மிச்சப்படுத்தும்.

** லிஸ்ப் மதிப்பு (Lisp Value)

சி இல் உள்ள பிழைகளைச் சமாளிக்க பல வழிகள் உள்ளன, ஆனால் இந்தச் சூழலில் எனது
விருப்பமான முறையானது ஒரு வெளிப்பாட்டின் (expression) மதிப்பீட்டின் விளைவாக
பிழைகளை உருவாக்குவதாகும். லிஸ்பியில், ஒரு வெளிப்பாடு ஒரு எண்ணை அல்லது பிழையை
மதிப்பிடும் என்று நாம் கூறலாம். எடுத்துக்காட்டாக + 1 2 ஒரு எண்ணை மதிப்பிடும்,
ஆனால் / 10 0 பிழையை மதிப்பிடும்.

இதற்கு நமக்கு ஒரு தரவு அமைப்பு (Data structure) தேவை, அது ஒன்று அல்லது
எதுவாக இருந்தாலும் செயல்பட முடியும். எளிமைக்காக, பிரதிநிதித்துவப்படுத்தக்கூடிய
(Re presentable) ஒவ்வொரு விஷயத்திற்கும் குறிப்பிட்ட புலங்களைக் (fields) கொண்ட
ஒரு கட்டமைப்பையும் (structure), அணுகுவதற்கு அர்த்தமுள்ள புலங்களைச் சரியாகச் சொல்ல
ஒரு சிறப்பு புல (special field) வகையையும் பயன்படுத்தப் போகிறோம்.

இதை நாம் ஒரு lval என்று அழைக்கப் போகிறோம், இது லிஸ்ப் மதிப்பைக் குறிக்கிறது.

#+begin_src c
  /* புதிய lval கட்டமைப்பை அறிவிக்கவும் */
  typedef struct {
    int type;
    long num;
    int err;
  } lval;
#+end_src

** கணக்கீடுகள் (Enumerations)
புலங்களின் வகையை (field types) நீங்கள் கவனியுங்கள் type மற்றும் err, இது முழு
எண்ணாக உள்ளது. அதாவது அவை ஒற்றை முழு எண் எண்ணால் குறிக்கப்படுகின்றன.

நாம் எண்ணைத் தேர்ந்தெடுப்பதற்குக் காரணம், நமக்குத் தேவையானதை குறியாக்க (encode),
ஒவ்வொரு முழு எண் மதிப்புக்கும் அர்த்தத்தை ஒதுக்குவோம். எடுத்துக்காட்டாக, "வகை 0
என்றால் கட்டமைப்பு (structure) ஒரு எண்." அல்லது "வகை 1 என்றால் கட்டமைப்பு
(structure) பிழை (error)" என்ற விதியை உருவாக்கலாம். இது விஷயங்களைச்
செய்வதற்கான எளிய மற்றும் பயனுள்ள வழியாகும்.

ஆனால், நமது குறியீட்யில் 0 மற்றும் 1-ஐக் கொண்டு எழுதினால், என்ன நடக்கிறது என்பது
தெளிவாகத் தெரியவில்லை. அதற்கு பதிலாக இந்த முழு எண் மதிப்புகள் ஒதுக்கப்பட்ட
பெயரிடப்பட்ட மாறிலிகளைப் (constants) பயன்படுத்தலாம். ஒரு எண்ணை 0 அல்லது 1 உடன்
ஏன் ஒப்பிடலாம் மற்றும் இந்த சூழலில் என்ன அர்த்தம் என்பதை இது வாசகருக்கு
உணர்த்துகிறது.

C இல் இது ஒரு enum ஐப் பயன்படுத்தி இதை செய்யலாம்.

#+begin_src c
  /* சாத்தியமான lval வகைகளின் கணக்கீட்டை உருவாக்க */
  enum { LVAL_NUM, LVAL_ERR };
#+end_src

ஒரு enum என்பது மாறிகளின் அறிவிப்பு ஆகும், இது முழு எண் மாறிலி மதிப்புகலாக
ஒதுக்கப்படும். type புலத்திற்கான சில கணக்கிடப்பட்ட மதிப்புகளை (enumerated
values) எவ்வாறு அறிவிப்போம் என்பதை மேலே விவரிக்கிறது.

பிழை புலத்திற்கான கணக்கீட்டையும் நாம் அறிவிக்க விரும்புகிறோம். நமது குறிப்பிட்ட
திட்டத்தில் மூன்று பிழைகள் உள்ளன. பூஜ்ஜியத்தால் வகுத்தல், அறியப்படாத செயலி
(operator) அல்லது ஒரு நீண்ட (long) எண்ணைப் பயன்படுத்தி நிரலால் குறிப்பிட
முடியாத அளவுக்குப் பெரிய எண்ணைக் பிரதிநிதித்துவம் (represents)
படுத்துதல். இவற்றைப் பின்வருமாறு கணக்கிடலாம் (enumerate).

#+begin_src c
  /* சாத்தியமான பிழை வகைகளின் கணக்கீட்டை உருவாக்க */
  enum { LERR_DIV_ZERO, LERR_BAD_OP, LERR_BAD_NUM };
#+end_src

** லிஸ்ப் மதிப்பு செயல்பாடுகள் (Lisp Value Functions)

நம் lval வகை கிட்டத்தட்ட தயாராக உள்ளது. முந்தைய நீண்ட எண் (Long) வகையைப் போலன்றி,
புதிய நிகழ்வுகளை உருவாக்குவதற்கான தற்போதைய முறை நம்மிடம் இல்லை. இதைச் செய்ய,
பிழை வகை (error type) அல்லது எண் வகையின் lval ஐ உருவாக்கும் இரண்டு
செயல்பாடுகளை நாம் அறிவிக்கலாம்

#+begin_src c
  /* ஒரு புதிய எண் வகை lval உருவாக்கவும் */
  lval lval_num(long x) {
    lval v;
    v.type = LVAL_NUM;
    v.num = x;
    return v;
  }

  /* ஒரு புதிய பிழை வகை lval உருவாக்கவும் */
  lval lval_err(int x) {
    lval v;
    v.type = LVAL_ERR;
    v.err = x;
    return v;
  }
#+end_src

இந்தச் செயல்பாடுகள் முதலில் v எனப்படும் ஒரு lval ஐ உருவாக்குகின்றன, அதைத்
திரும்பப் பெறுவதற்கு முன் புலங்களை நியமனம் செய்யவும்.

நம் lval செயல்பாடு இப்போது இரண்டு விஷயங்கள் செய்ய கூடும் என்பதால், அதை
வெளியிடுவதற்கு நாம் இனி printf ஐப் பயன்படுத்த முடியாது. கொடுக்கப்பட்ட lval
வகையைப் பொறுத்து நாம் வித்தியாசமான குறியீட்டை செயல்படுத்த
விரும்புகிறோம். தேர்ந்தெடு அறிக்கையைப் (Switch statement) பயன்படுத்தி சி இல்
இதைச் செய்ய ஒரு சுருக்கமான வழி உள்ளது. இது சில மதிப்பை உள்ளீடாக எடுத்து,
நிலைகள் (cases) எனப்படும் மற்ற அறியப்பட்ட மதிப்புகளுடன் ஒப்பிடுகிறது. மதிப்புகள்
சமமாக இருக்கும்போது அடுத்த நிறுத்து அறிக்கை (break statement) வரை பின்தொடரும்
குறியீட்டை இயக்குகிறது.

இதைப் பயன்படுத்தி, இதுபோன்ற எந்த வகையிலும் lval ஐ அச்சிடக்கூடிய செயல்பாட்டை
உருவாக்கலாம்.

#+begin_src c
  /* ஒரு "lval" அச்சிட */
  void lval_print(lval v) {
    switch (v.type) {
      /* வகை எண்ணாக இருந்தால், அதை அச்சிடவும் */
      /* பிறகு தேர்ந்தெடுவை (switch) 'நிறுத்து (break)'. */
      case LVAL_NUM: printf("%li", v.num); break;

      /* வழக்கில் பிழை வகை */
      case LVAL_ERR:
	 /* இது எந்த வகையான பிழை என்பதை சரிபார்த்து அதை அச்சிடவும் */
	if (v.err == LERR_DIV_ZERO) {
	  printf("Error: Division By Zero!");
	}
	if (v.err == LERR_BAD_OP)   {
	  printf("Error: Invalid Operator!");
	}
	if (v.err == LERR_BAD_NUM)  {
	  printf("Error: Invalid Number!");
	}
      break;
    }
  }

  /* ஒரு "lval" ஐத் தொடர்ந்து ஒரு புதிய வரியை அச்சிடுக */
  void lval_println(lval v) { lval_print(v); putchar('\n'); }
#+end_src

** பிழைகளை மதிப்பிடுதல் (Evaluating Errors)
இப்போது lval வகையுடன் எவ்வாறு வேலை செய்வது என்பது நமக்கு தெரியும், long
பதிலாக அதைப் பயன்படுத்துவதற்கு நம் மதிப்பீட்டு செயல்பாடுகளை மாற்ற வேண்டும்.

வகை கையொப்பங்களை (signature) மாற்றுவதுடன், பிழை உள்ளீடாகவோ அல்லது ஒரு எண்ணை
உள்ளீடாகவோ எதிர்கொண்டால் அவை சரியாகச் செயல்படும் வகையில் செயல்பாடுகளை மாற்ற
வேண்டும்.

நம் eval_op செயல்பாட்டில், ஒரு பிழை ஏற்பட்டால், அதை உடனடியாகத் திருப்பித் தர
வேண்டும், மேலும் இரண்டு தருமதிப்புகளும் (arguments) எண்களாக இருந்தால் மட்டுமே
கணக்கிட வேண்டும். பூஜ்ஜியத்தால் வகுக்க முயற்சிப்பதற்குப் பதிலாக, பிழையைத் திருப்பித்
தருவதற்காக, நம் குறியீட்டை மாற்றியமைக்க வேண்டும். இந்த அத்தியாயத்தின் தொடக்கத்தில்
விவரிக்கப்பட்டுள்ள செயலிழப்பை இது சரிசெய்யும்.

#+begin_src c
  lval eval_op(lval x, char* op, lval y) {
  
    /* ஏதேனும் ஒரு மதிப்பு பிழையாக இருந்தால் அதைத் திருப்பித் தரவும் */
    if (x.type == LVAL_ERR) { return x; }
    if (y.type == LVAL_ERR) { return y; }
      
    /* இல்லையெனில் எண் மதிப்புகளில் கணிதம் செய்யுங்கள் */
    if (strcmp(op, "+") == 0) { return lval_num(x.num + y.num); }
    if (strcmp(op, "-") == 0) { return lval_num(x.num - y.num); }
    if (strcmp(op, "*") == 0) { return lval_num(x.num * y.num); }
    if (strcmp(op, "/") == 0) {
      /* இரண்டாவது செயல்ஏற்பி (Operand) பூஜ்யம் இருந்தால் பிழையாக திரும்ப அனுப்பனும் */
      return y.num == 0
        ? lval_err(LERR_DIV_ZERO)
        : lval_num(x.num / y.num);
    }
  
    return lval_err(LERR_BAD_OP);
  }
#+end_src

- கேள்விக்குறி (?) குறியீட்டில் என்ன செய்கிறது ?
  - இரண்டாவது தருமதிப்பு (argument) பூஜ்ஜியமாக உள்ளதா என்பதைச்
    சரிபார்ப்பதற்காக, நம் ஒரு கேள்விக்குறி (?) குறியீட்டைப் பயன்படுத்துகிறோம்
    என்பதை நீங்கள் கவனிப்பீர்கள், அதைத் தொடர்ந்து ஒரு முக்காற்புள்ளி (:). இது மும்மச்
    செயலி (ternary operator) என்று அழைக்கப்படுகிறது, மேலும் இது ஒரு வரியில்
    நிபந்தனை வெளிப்பாடுகளை (conditional expressions) எழுத அனுமதிக்கிறது.
  - இது போன்ற இது வேலை செய்கிறது. <நிபந்தனை(Condition)> ? <பிறகு(then)> :
    <வேறு(else)>. வேறு வார்த்தைகளில் கூறுவதானால், நிபந்தனை உண்மையாக இருந்தால்,
    அது ? கேள்விக்குறி பக்கத்தில் உள்ள பிறகு (then) குறியீட்டை செயல்படுத்தும்
    அப்படி இல்லை என்றால் வேறு (else) குறியீட்டை செயல்படுத்தும்.
  - சிலர் இந்த செயலி விரும்பவில்லை, ஏனெனில் இது குறியீட்டை தெளிவில்லாமல்
    செய்கிறது என்று அவர்கள் நம்புகிறார்கள். மும்முனை செயலி (Ternary operator)
    பற்றி உங்களுக்குப் பரிச்சயமில்லாமல் இருந்தால், முதலில் அதைப் பயன்படுத்துவதில்
    உங்களுக்கு சங்கடமாக இருக்கும்; ஆனால் நீங்கள் அதை அறிந்தவுடன் அரிதாகவே சிக்கல்கள்
    வரும்.


<h2 id='evaluating_errors'>Evaluating Errors</h2> <hr/>

<p>Now that we know how to work with the <code>lval</code> type, we need to change our evaluation functions to use it instead of <code>long</code>.</p>

<p>As well as changing the type signatures we need to change the functions such that they work correctly upon encountering either an <em>error</em> as input, or a <em>number</em> as input.</p>

<p>In our <code>eval_op</code> function, if we encounter an error we should return it right away, and only do computation if both the arguments are numbers. We should modify our code to return an error rather than attempt to divide by zero. This will fix the crash described at the beginning of this chapter.</p>

<pre><code data-language='c'>lval eval_op(lval x, char* op, lval y) {

  /* If either value is an error return it */
  if (x.type == LVAL_ERR) { return x; }
  if (y.type == LVAL_ERR) { return y; }

  /* Otherwise do maths on the number values */
  if (strcmp(op, "+") == 0) { return lval_num(x.num + y.num); }
  if (strcmp(op, "-") == 0) { return lval_num(x.num - y.num); }
  if (strcmp(op, "*") == 0) { return lval_num(x.num * y.num); }
  if (strcmp(op, "/") == 0) {
    /* If second operand is zero return error */
    return y.num == 0
      ? lval_err(LERR_DIV_ZERO)
      : lval_num(x.num / y.num);
  }

  return lval_err(LERR_BAD_OP);
}</code></pre>

<div class="alert alert-warning">
  <p><strong>What is that <code>?</code> doing there?</strong></p>

  <p>You'll notice that for division to check if the second argument is zero we use a question mark symbol <code>?</code>, followed by a colon <code>:</code>. This is called the <em>ternary operator</em>, and it allows you to write conditional expressions on one line.</p>

  <p>It works something like this. <code>&lt;condition&gt; ? &lt;then&gt; : &lt;else&gt;</code>. In other words, if the condition is true it returns what follows the <code>?</code>, otherwise it returns what follows <code>:</code>.</p>

  <p>Some people dislike this operator because they believe it makes code unclear. If you are unfamiliar with the ternary operator, you may initially find it awkward to use; but once you get to know it there are rarely problems.</p>
</div>

<p>We need to give a similar treatment to our <code>eval</code> function. In this case because we've defined <code>eval_op</code> to robustly handle errors we just need to add the error conditions to our number conversion function.</p>

<p>In this case we use the <code>strtol</code> function to convert from string to <code>long</code>. This allows us to check a special variable <code>errno</code> to ensure the conversion goes correctly. This is a more robust way to convert numbers than our previous method using <code>atoi</code>.</p>

<pre><code data-language='c'>lval eval(mpc_ast_t* t) {

  if (strstr(t-&gt;tag, "number")) {
    /* Check if there is some error in conversion */
    errno = 0;
    long x = strtol(t-&gt;contents, NULL, 10);
    return errno != ERANGE ? lval_num(x) : lval_err(LERR_BAD_NUM);
  }

  char* op = t-&gt;children[1]-&gt;contents;
  lval x = eval(t-&gt;children[2]);

  int i = 3;
  while (strstr(t-&gt;children[i]-&gt;tag, "expr")) {
    x = eval_op(x, op, eval(t-&gt;children[i]));
    i++;
  }

  return x;
}</code></pre>

<p>The final small step is to change how we print the result found by our evaluation to use our newly defined printing function which can print any type of <code>lval</code>.</p>

<pre><code data-language='c'>lval result = eval(r.output);
lval_println(result);
mpc_ast_delete(r.output);</code></pre>

<p>And we are done! Try running this new program and make sure there are no crashes when dividing by zero.</p>

<pre><code data-language='lispy'>lispy&gt; / 10 0
Error: Division By Zero!
lispy&gt; / 10 2
5</code></pre>


** குழாய்வேைல (Plumbing)
<h2 id='plumbing'>Plumbing</h2> <hr/>

<div class='pull-right alert alert-warning' style="margin: 15px; text-align: center;">
  <img src="/static/img/plumbing.png" alt="plumbing" class="img-responsive" width="368px" height="302px"/>
  <p><small>Plumbing &bull; Harder than you think</small></p>
</div>

<p>Some of you who have gotten this far in the book may feel uncomfortable with how it is progressing. You may feel you've managed to follow instructions well enough, but don't have a clear understanding of all of the underlying mechanisms going on behind the scenes.</p>

<p>If this is the case I want to reassure you that you are doing well. If you don't understand the internals it's because I may not have explained everything in sufficient depth. This is okay.</p>

<p>To be able to progress and get code to work under these conditions is a great skill in programming, and if you've made it this far it shows you have it.</p>

<p>In programming we call this <em>plumbing</em>. Roughly speaking this is following instructions to try to tie together a bunch of libraries or components, without fully understanding how they work internally.</p>

<p>It requires <em>faith</em> and <em>intuition</em>. <em>Faith</em> is required to believe that if the stars align, and every incantation is correctly performed for this magical machine, the right thing will really happen. And <em>intuition</em> is required to work out what has gone wrong, and how to fix things when they don't go as planned.</p>

<p>Unfortunately these can't be taught directly, so if you've made it this far then you've made it over a difficult hump, and in the following chapters I promise we'll finish up with the plumbing, and actually start programming that feels fresh and wholesome.</p>


<h2>Reference</h2> <hr/>

<references />

** வெகுமதி மதிப்பெண் (Bonus Marks)
<h2>Bonus Marks</h2> <hr/>

<div class="alert alert-warning">
  <ul class="list-group">
    <li class="list-group-item">&rsaquo; Run the previous chapter's code through <code>gdb</code> and crash it. See what happens.</li>
    <li class="list-group-item">&rsaquo; How do you give an <code>enum</code> a name?</li>
    <li class="list-group-item">&rsaquo; What are <code>union</code> data types and how do they work?</li>
    <li class="list-group-item">&rsaquo; What are the advantages over using a <code>union</code> instead of <code>struct</code>?</li>
    <li class="list-group-item">&rsaquo; Can you use a <code>union</code> in the definition of <code>lval</code>?</li>
    <li class="list-group-item">&rsaquo; Extend parsing and evaluation to support the remainder operator <code>%</code>.</li>
    <li class="list-group-item">&rsaquo; Extend parsing and evaluation to support decimal types using a <code>double</code> field.</li>
  </ul>
</div>


<h2>Navigation</h2>

<table class="table" style='table-layout: fixed;'>
  <tr>
    <td class="text-left"><a href="chapter7_evaluation"><h4>&lsaquo; Evaluation</h4></a></td>
    <td class="text-center"><a href="contents"><h4>&bull; Contents &bull;</h4></a></td>
    <td class="text-right"><a href="chapter9_s_expressions"><h4>S-Expressions &rsaquo;</h4></a></td>
  </tr>
</table>
