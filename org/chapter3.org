* அத்தியாயம் 3 - அடிப்படைகள் (Basics)

** கண்ணோட்டம் (Overview)

இந்த அத்தியாயத்தில் நான் சி இன் அடிப்படை அம்சங்களின் விரைவான கண்ணோட்டத்தை தயார்
செய்துள்ளேன். சி இல் சில அம்சங்களே உள்ளன, மேலும் தொடரியல்(Syntax) மிகவும்
எளிமையானது. ஆனால் இது எளிதாக கறக்க முடியும் என்று அர்த்தமல்ல. அனைத்து குணங்களும்
மேற்பரப்புக்கு கீழே ஆழமாக மறைந்து இருக்கிறது. இதன் காரணமாக, நாம் இப்போது
அம்சங்களையும்(Features) மற்றும் தொடரியல்களையும்(Syntax) மிக விரைவாக கறக்க
போகிறோம், வரும் அத்தியாயங்களில் அவற்றை இன்னும் ஆழமாகப் பார்க்க போகிறோம்.

இந்த அத்தியாயத்தின் குறிக்கோள் அனைவரையும் ஒருமுகப்படுத்தி கொண்டு செல்வதாகும். சி
க்கு முற்றிலும் புதியவர்கள் சிறிது நேரம் அவ்வப்போது ஓய்வு எடுத்துக் கொள்ள வேண்டும்,
அதே சமயம் ஏற்கனவே சில அனுபவமுள்ளவர்கள் இந்த புத்தம் சுருக்கமாக படிக்க எளிதாக
இருக்கலாம் மற்றும் தேவைக்கேற்ப திரும்ப வந்து படிக்கலாம்.

** நிரல்கள்(Programs)

சி இல் உள்ள நிரல் செயல்பாடு வரையறைகள்(Function declaration) மற்றும் கட்டமைப்பு
வரையறைகளை(Structure declaration) மட்டுமே கொண்டுள்ளது.

எனவே ஒரு மூல கோப்பு(source file) என்பது செயல்பாடுகள் மற்றும் வகைகளின்(Types)
பட்டியல். இந்தச் செயல்பாடுகள் ஒன்றையொன்று அல்லது தங்களைத் தாங்களே அழைக்கலாம், மேலும்
அறிவிக்கப்பட்ட அல்லது மொழியில் உள்ளமைக்கப்பட்ட தரவு வகைகளைப்(Data Types)
பயன்படுத்தலாம்.

பிற நிரலகம்(Library) உள்ள செயல்பாடுகளை அழைக்க அல்லது அவற்றின் தரவு வகைகளைப்
பயன்படுத்த முடியும். சி நிரலாக்கத்தில் சிக்கலான அடுக்குகள் இப்படித்தான்
குவிக்கப்படுகின்றன.

நாம் முந்தைய அத்தியாயத்தில் பார்த்தது போல், ஒரு சி நிரலின் செயல்படுத்தல் எப்போதும்
முதன்மை(Main) எனப்படும் செயல்பாட்டில் இருந்து தொடங்குகிறது. இங்கிருந்து அது
தேவையான அனைத்து செயல்களையும் செய்ய, மேலும் மேலும் செயல்பாடுகளை அழைக்கிறது.

** மாறிகள்(Variables)

சி இல் உள்ள செயல்பாடுகள் மாறிகளைக் கையாளுவதைக் கொண்டிருக்கும். இவை
எண்கள்(Integer,Float), சரம்(String) போன்ற தரவு உருப்படிக்கு (data items) நாம்
பெயர் சூட்டுவோம் .

சி இல் உள்ள ஒவ்வொரு மாறிக்கும் ஒரு வெளிப்படையான வகை உள்ளது. இந்த வகைகள் நாமே
அறிவிக்கப்பட்டவை அல்லது மொழியில் கட்டமைக்கப்பட்டவை. ஒரு புதிய மாறியை அதன் வகையின்
பெயரை எழுதி, அதன் பெயரைத் தொடர்ந்து, விருப்பமாக = ஐப் பயன்படுத்தி சில
மதிப்பிற்கு அமைப்பதன் மூலம் அறிவிக்கலாம். இந்த அறிவிப்பு ஒரு
அறிக்கையாகும்(Statement), மேலும் சி இல் உள்ள அனைத்து அறிக்கைகளையும்
அரைப்புள்ளியுடன்(;) முடிக்கிறோம்.

ஒரு புதிய முழுஎண் ~count~ என்ற பெயர்யில் உருவாக்க, பின்வருவனவற்றை எழுதலாம்.

#+begin_src c
  int count;
#+end_src

அல்லது அதை அறிவித்து மதிப்பை வைக்க...

#+begin_src c
  int count = 10;
#+end_src

சில உள்ளமைக்கப்பட்ட வகைகளின்(Builtin types) சில விளக்கங்களும் எடுத்துக்காட்டுகளும்
இங்கே உள்ளன.

| தரவுவகை | விளக்கங்கள்                       | எடுத்துக்காட்டு                           |
|---------+---------------------------------+---------------------------------------|
| void    | வெற்று வகை                      |                                       |
| char    | ஒற்றை எழுத்து/பைட்               | char last_initial = 'H';              |
| int     | முழுஎண்                         | int age = 23;                         |
| long    | பெரிய மதிப்புகளை கொண்ட முழுஎண் | long age_of_universe = 13798000000;   |
| float   | தசம(Decimal) எண்                | float liters_per_pint = 0.568f;       |
| double  | அதிக துல்லியத்துடன் தசம எண்       | double speed_of_swallow = 0.01072896; |

** செயல்பாடு அறிவிப்பு(Function Declarations)
<h2 id='function_declarations'>Function Declarations</h2> <hr/>

<p>A function is a computation that manipulates variables, and
optionally changes the state of the program. It takes as input some
variables and returns some single variable as output.</p>

<p>To declare a function we write the type of the variable it returns,
the name of the function, and then in parenthesis a list of the
variables it takes as input, separated by commas. The contents of the
function are put inside curly brackets <code>{}</code>, and lists all
of the statements the function executes, terminated by semicolons
<code>;</code>. A <code>return</code> statement is used to let the
function finish and output a variable.</p>

<p>For example a function that takes two <code>int</code> variables
called <code>x</code> and <code>y</code> and adds them together could
look like this.</p>

<pre><code data-language='c'>int add_together(int x, int y) { int
  result = x + y; return result; }</code></pre>

<p>We call functions by writing their name and putting the arguments
to the function in parentheses, separated by commas. For example to
call the above function and store the result in a variable
<code>added</code> we would write the following.</p>

<pre><code data-language='c'>int added = add_together(10,
18);</code></pre>

** கட்டமைப்பு அறிவிப்பு(Structure Declarations)
<h2 id='structure_declarations'>Structure Declarations</h2> <hr/>

<p>Structures are used to declare new <em>types</em>. Structures are
several variables bundled together into a single package.</p>

<p>We can use structure to represent more complex data types. For
example to represent a point in 2D space we could create a structure
called <code>point</code> that packs together two <code>float</code>
(decimal) values called <code>x</code> and <code>y</code>. To declare
structures we can use the <code>struct</code> keyword in conjunction
with the <code>typedef</code> keyword. Our declaration would look like
this.</p>

<pre><code data-language='c'>typedef struct { float x; float y; }
  point;</code></pre>

<p>We should place this definition above any functions that wish to
use it. This type is no different to the built in types, and we can
use it in all the same ways. To access an individual field we use a
dot <code>.</code>, followed by the name of the field, such as
<code>x</code>.</p>

<pre><code data-language='c'>point p; p.x = 0.1; p.y = 10.0;

float length = sqrt(p.x * p.x + p.y * p.y); </code></pre>


** சுட்டு(Pointers)

<h2 id='pointers'>Pointers</h2> <hr/>

<div class='pull-right alert alert-warning' style="margin: 15px;
  text-align: center;"> <img src="/static/img/pointer.png"
  alt="pointer" class="img-responsive" width="251px" height="384px"/>
  <p><small>Pointer &bull; A short haired one</small></p> </div>

<p>A pointer is a variation on a normal type where the type name is
suffixed with an asterisk. For example we could declare a <em>pointer
to an integer</em> by writing <code>int*</code>. We already saw a
pointer type <code>char** argv</code>. This is a <em>pointer to
pointers to characters</em>, and is used as input to <code>main</code>
function.</p>

<p>Pointers are used for a whole number of different things such as
for strings or lists. These are a difficult part of C and will be
explained in much greater detail in later chapters. We won't make use
of them for a while, so for now it is good to simply know they exist,
and how to spot them. Don't let them scare you off!</p>

** சரம்(Strings)
<h2 id='strings'>Strings</h2> <hr/>

<p>In C strings are represented by the pointer type
<code>char*</code>. Under the hood they are stored as a list of
characters, where the final character is a special character called
the <em>null terminator</em>. Strings are a complicated and important
part of C, which we'll learn to use effectively in the next few
chapters.</p>

<p>Strings can also be declared literally by putting text between
quotation marks. We used this in the previous chapter with our string
<code>"Hello, World!"</code>. For now, remember that if you see
<code>char*</code>, you can read it as a <em>string</em>.</p>

** நிபந்தனைகள்(Conditionals)
<h2 id='conditionals'>Conditionals</h2> <hr/>

<p>Conditional statements let the program perform some code only if
certain conditions are met.</p>

<p>To perform code under some condition we use the <code>if</code>
statement. This is written as <code>if</code> followed by some
condition in parentheses, followed by the code to execute in curly
brackets. An <code>if</code> statement can be followed by an optional
<code>else</code> statement, followed by other statements in curly
brackets. The code in these brackets will be performed in the case the
conditional is false.</p>

<p>We can test for multiple conditions using the logical operators
<code>||</code> for <em>or</em>, and <code>&&</code> for
<em>and</em>.</p>

<p>Inside a conditional statement's parentheses any value that is not
<code>0</code> will evaluate to true. This is important to remember as
many conditions use this to check things implicitly.</p>

<p>If we wished to check if an <code>int</code> called <code>x</code>
was greater than <code>10</code> and less than <code>100</code>, we
would write the following.</p>

<pre><code data-language='c'>if (x > 10 && x < 100) { puts("x is
  greater than 10 and less than 100!"); } else { puts("x is less than
  11 or greater than 99!"); }</code></pre>

** மடக்கி(Loops)
<h2 id='loops'>Loops</h2> <hr/>

<p>Loops allow for some code to be repeated until some condition
becomes false, or some counter elapses.</p>

<p>There are two main loops in C. The first is a <code>while</code>
loop. This loop repeatedly executes a block of code until some
condition becomes false. It is written as <code>while</code> followed
by some condition in parentheses, followed by the code to execute in
curly brackets. For example a loop that counts downward from
<code>10</code> to <code>1</code> could be written as follows.</p>

<pre><code data-language='c'>int i = 10; while (i > 0) { puts("Loop
Iteration"); i = i - 1; }</code></pre>

<p>The second kind of loop is a <code>for</code> loop. Rather than a
condition, this loop requires three expressions separated by
semicolons <code>;</code>. These are an <em>initialiser</em>, a
<em>condition</em> and an <em>incrementer</em>. The
<em>initialiser</em> is performed before the loop starts. The
<em>condition</em> is checked before each iteration of the loop. If it
is false, the loop is exited. The <em>incrementer</em> is performed at
the end of each iteration of the loop. These loops are often used for
counting as they are more compact than the <code>while</code>
loop.</p>

<p>For example to write a loop that counts up from <code>0</code> to
<code>9</code> we might write the following. In this case the
<code>++</code> operator increments the variable <code>i</code>.</p>

<pre><code data-language='c'>for (int i = 0; i < 10; i++) { puts("Loop
  Iteration"); }</code></pre>

** வெகுமதி மதிப்பெண் (Bonus Marks)
<h2>Bonus Marks</h2> <hr/>

<div class="alert alert-warning"> <ul class="list-group"> <li
  class="list-group-item">&rsaquo; Use a <code>for</code> loop to
  print out <code>Hello World!</code> five times.</li> <li
  class="list-group-item">&rsaquo; Use a <code>while</code> loop to
  print out <code>Hello World!</code> five times.</li> <li
  class="list-group-item">&rsaquo; Declare a function that outputs
  <code>Hello World!</code> <code>n</code> number of times. Call this
  from <code>main</code>.</li> <li class="list-group-item">&rsaquo;
  What built in types are there other than the ones listed?</li> <li
  class="list-group-item">&rsaquo; What other conditional operators
  are there other than <em>greater than</em> <code>&gt;</code>, and
  <em>less than</em> <code>&lt;</code>?</li> <li
  class="list-group-item">&rsaquo; What other mathematical operators
  are there other than <em>add</em> <code>+</code>, and
  <em>subtract</em> <code>-</code>?</li> <li
  class="list-group-item">&rsaquo; What is the <code>+=</code>
  operator, and how does it work?</li> <li
  class="list-group-item">&rsaquo; What is the <code>do</code> loop,
  and how does it work?</li> <li class="list-group-item">&rsaquo; What
  is the <code>switch</code> statement and how does it work?</li> <li
  class="list-group-item">&rsaquo; What is the <code>break</code>
  keyword and what does it do?</li> <li
  class="list-group-item">&rsaquo; What is the <code>continue</code>
  keyword and what does it do?</li> <li
  class="list-group-item">&rsaquo; What does the <code>typedef</code>
  keyword do exactly?</li> </ul> </div>

<h2>Navigation</h2>


<table class="table" style='table-layout: fixed;'> <tr> <td
  class="text-left"><a href="chapter2_installation"><h4>&lsaquo;
  Installation</h4></a></td> <td class="text-center"><a
  href="contents"><h4>&bull; Contents &bull;</h4></a></td> <td
  class="text-right"><a href="chapter4_interactive_prompt"><h4>An
  Interactive Prompt &rsaquo;</h4></a></td> </tr> </table>
