* அத்தியாயம் 3 - அடிப்படைகள் (Basics)

** கண்ணோட்டம் (Overview)

இந்த அத்தியாயத்தில் நான் சி இன் அடிப்படை அம்சங்களின் விரைவான கண்ணோட்டத்தை தயார்
செய்துள்ளேன். சி இல் சில அம்சங்களே உள்ளன, மேலும் தொடரியல்(Syntax) மிகவும்
எளிமையானது. ஆனால் இது எளிதாக கறக்க முடியும் என்று அர்த்தமல்ல. அனைத்து குணங்களும்
மேற்பரப்புக்கு கீழே ஆழமாக மறைந்து இருக்கிறது. இதன் காரணமாக, நாம் இப்போது
அம்சங்களையும்(Features) மற்றும் தொடரியல்களையும்(Syntax) மிக விரைவாக கறக்க
போகிறோம், வரும் அத்தியாயங்களில் அவற்றை இன்னும் ஆழமாகப் பார்க்க போகிறோம்.

இந்த அத்தியாயத்தின் குறிக்கோள் அனைவரையும் ஒருமுகப்படுத்தி கொண்டு செல்வதாகும். சி
க்கு முற்றிலும் புதியவர்கள் சிறிது நேரம் அவ்வப்போது ஓய்வு எடுத்துக் கொள்ள வேண்டும்,
அதே சமயம் ஏற்கனவே சில அனுபவமுள்ளவர்கள் இந்த புத்தம் சுருக்கமாக படிக்க எளிதாக
இருக்கலாம் மற்றும் தேவைக்கேற்ப திரும்ப வந்து படிக்கலாம்.

** நிரல்கள்(Programs)

சி இல் உள்ள நிரல் செயல்பாடு வரையறைகள்(Function declaration) மற்றும் கட்டமைப்பு
வரையறைகளை(Structure declaration) மட்டுமே கொண்டுள்ளது.

எனவே ஒரு மூல கோப்பு(source file) என்பது செயல்பாடுகள் மற்றும் வகைகளின்(Types)
பட்டியல். இந்தச் செயல்பாடுகள் ஒன்றையொன்று அல்லது தங்களைத் தாங்களே அழைக்கலாம், மேலும்
அறிவிக்கப்பட்ட அல்லது மொழியில் உள்ளமைக்கப்பட்ட தரவு வகைகளைப்(Data Types)
பயன்படுத்தலாம்.

பிற நிரலகம்(Library) உள்ள செயல்பாடுகளை அழைக்க அல்லது அவற்றின் தரவு வகைகளைப்
பயன்படுத்த முடியும். சி நிரலாக்கத்தில் சிக்கலான அடுக்குகள் இப்படித்தான்
குவிக்கப்படுகின்றன.

நாம் முந்தைய அத்தியாயத்தில் பார்த்தது போல், ஒரு சி நிரலின் செயல்படுத்தல் எப்போதும்
முதன்மை(Main) எனப்படும் செயல்பாட்டில் இருந்து தொடங்குகிறது. இங்கிருந்து அது
தேவையான அனைத்து செயல்களையும் செய்ய, மேலும் மேலும் செயல்பாடுகளை அழைக்கிறது.

** மாறிகள்(Variables)

சி இல் உள்ள செயல்பாடுகள் மாறிகளைக் கையாளுவதைக் கொண்டிருக்கும். இவை
எண்கள்(Integer,Float), சரம்(String) போன்ற தரவு உருப்படிக்கு (data items) நாம்
பெயர் சூட்டுவோம் .

சி இல் உள்ள ஒவ்வொரு மாறிக்கும் ஒரு வெளிப்படையான வகை உள்ளது. இந்த வகைகள் நாமே
அறிவிக்கப்பட்டவை அல்லது மொழியில் கட்டமைக்கப்பட்டவை. ஒரு புதிய மாறியை அதன் வகையின்
பெயரை எழுதி, அதன் பெயரைத் தொடர்ந்து, விருப்பமாக = ஐப் பயன்படுத்தி சில
மதிப்பிற்கு அமைப்பதன் மூலம் அறிவிக்கலாம். இந்த அறிவிப்பு ஒரு
அறிக்கையாகும்(Statement), மேலும் சி இல் உள்ள அனைத்து அறிக்கைகளையும்
அரைப்புள்ளியுடன்(;) முடிக்கிறோம்.

ஒரு புதிய முழுஎண் ~count~ என்ற பெயர்யில் உருவாக்க, பின்வருவனவற்றை எழுதலாம்.

#+begin_src c
  int count;
#+end_src

அல்லது அதை அறிவித்து மதிப்பை வைக்க...

#+begin_src c
  int count = 10;
#+end_src

சில உள்ளமைக்கப்பட்ட வகைகளின்(Builtin types) சில விளக்கங்களும் எடுத்துக்காட்டுகளும்
இங்கே உள்ளன.

| தரவுவகை | விளக்கங்கள்                       | எடுத்துக்காட்டு                           |
|---------+---------------------------------+---------------------------------------|
| void    | வெற்று வகை                      |                                       |
| char    | ஒற்றை எழுத்து/பைட்               | char last_initial = 'H';              |
| int     | முழுஎண்                         | int age = 23;                         |
| long    | பெரிய மதிப்புகளை கொண்ட முழுஎண் | long age_of_universe = 13798000000;   |
| float   | தசம(Decimal) எண்                | float liters_per_pint = 0.568f;       |
| double  | அதிக துல்லியத்துடன் தசம எண்       | double speed_of_swallow = 0.01072896; |

** செயல்பாடு அறிவிப்பு(Function Declarations)

ஒரு செயல்பாடு என்பது மாறிகளைக் கையாளும் ஒரு கணக்கீடு ஆகும், மேலும்
விருப்பத்திற்கு ஏற்றவாறு நிரலின் நிலையை மாற்றுகிறது. இது சில மாறிகளை
உள்ளீடாக(input) எடுத்துக்கொள்கிறது மற்றும் சில மாறியை வெளியீட்டாக(output)
வழங்குகிறது.

ஒரு செயல்பாட்டை அறிவிக்க, அது வழங்கும் மாறியின் வகை, செயல்பாட்டின் பெயர், பின்னர்
அடைப்புக்குறிக்குள்(parenthesis) அது உள்ளீடாக எடுக்கும் மாறிகளின் பட்டியலை
காற்புள்ளிகளால்(commas - ,) பிரிக்கப்படும். செயல்பாட்டின் உள்ளடக்கங்கள் சுருள்
அடைப்புக்குறிக்குள் வைக்கப்படுகின்றன {}, மேலும் செயல்பாடு செயல்படுத்தும் அனைத்து
அறிக்கைகளையும் அரைப்புள்ளிகளால்(Semicolon - ;) முடிக்கப்படுகின்றன. ஒரு வழங்கும்
அறிக்கை(Return statement) செயல்பாட்டை முடிக்க மற்றும் ஒரு மாறியை வெளியிட
அனுமதிக்கப்படுகிறது.

எடுத்துக்காட்டாக, x மற்றும் y எனப்படும் இரண்டு முழுஎண்(int) மாறிகளை எடுத்து
அவற்றை கூட்டல் செய்யும் செயல்பாடு இப்படி இருக்கும்.

#+begin_src c
  int add_together(int x, int y) {
    int result = x + y;
    return result;
  }
#+end_src

செயல்பாடுகளை அவற்றின் பெயரை எழுதி, காற்புள்ளிகளால்(Comma - ,) பிரிக்கப்பட்ட
அடைப்புக்குறிக்குள் வாதங்களை வைப்பதன் மூலம் செயல்பாடுகளை
அழைக்கிறோம். எடுத்துக்காட்டாக, மேலே உள்ள செயல்பாட்டை அழைக்கவும், முடிவை ஒரு
மாறியில் சேமிக்கவும், பின்வருவனவற்றை எழுதுவோம்.

#+begin_src c
  int added = add_together(10, 18);
#+end_src

** கட்டமைப்பு அறிவிப்பு(Structure Declarations)

புதிய வகைகளை அறிவிக்க கட்டமைப்புகள் பயன்படுத்தப்படுகின்றன. கட்டமைப்புகள் என்பது
ஒரு தொகுப்பில் ஒன்றாக இணைக்கப்பட்ட பல மாறிகள் ஆகும்.

மிகவும் சிக்கலான தரவு வகைகளைக் குறிக்க கட்டமைப்பைப்
பயன்படுத்தலாம். எடுத்துக்காட்டாக, 2D இடத்தில் ஒரு புள்ளியைப் குறிக்க, x மற்றும் y
எனப்படும் இரண்டு தசம(decimal) மதிப்புகளை ஒன்றாக இணைக்க point என்ற கட்டமைப்பை
உருவாக்கலாம். கட்டமைப்புகளை அறிவிக்க நாம் struct என்னும் சிறப்புச்சொலை(Keyword)
typedef சிறப்புச்சொல்லவுடன் இணைத்து பயன்படுத்தலாம்.நாம் அறிவிப்பு இப்படி இருக்கும்.

#+begin_src c
  typedef struct {
    float x;
    float y;
  } point;
#+end_src

இந்த அறிவிப்பை பயன்படுத்த விரும்பும் எந்தவொரு செயல்பாடுகளுக்கும் மேலே வைக்க
வேண்டும். இந்த வகை உள்ளமைக்கப்பட்ட வகைகளிலிருந்து வேறுபட்டது அல்ல, மேலும் நாம் அதை
எல்லா வழிகளிலும் பயன்படுத்தலாம். ஒரு தனிப்பட்ட புலத்தை(கட்டமைப்பு உள்ள மாறியின்
பெயர், ஆங்கிலத்தில் field) அணுக, நாம் ஒரு புள்ளியைப்(.) பயன்படுத்துகிறோம் அதைத்
தொடர்ந்து புலத்தின்(எ.கா x) எழுத வேண்டும்.

#+begin_src c
  point p;
  p.x = 0.1;
  p.y = 10.0;
  
  float length = sqrt(p.x * p.x + p.y * p.y);
#+end_src

** சுட்டு(Pointers)

ஒரு சுட்டி(pointer) என்பது ஒரு சாதாரண வகையின் மாறுபாடு ஆகும், அங்கு வகை
பெயர் உடன் உடுக்குறி(asterisk - \*) பின்னொட்டு இடப்படும். உதாரணமாக int* என்று
எழுதுவதன் மூலம் ஒரு முழு எண்ணுக்கு ஒரு சுட்டியை அறிவிக்கலாம். சுட்டி வகை
char** argv ஐ ஏற்கனவே பார்த்தோம். இது எழுத்துகளுக்கான சுட்டிகளுக்கான
சுட்டியாகும், மேலும் இது முதன்மை செயல்பாட்டிற்கு(Main function) உள்ளீடாகப்
பயன்படுத்தப்படுகிறது.

சரங்கள்(String) அல்லது பட்டியல்கள்(Lists) போன்ற பல்வேறு விஷயங்களின் சுட்டிகள்
பயன்படுத்தப்படுகின்றன. இவை சி இன் கடினமான பகுதியாகும், மேலும் அடுத்த
அத்தியாயங்களில் மிக விரிவாக விளக்கப்படும். நாம் சிறிது காலத்திற்கு அவற்றைப்
பயன்படுத்த மாட்டோம், எனவே அவை இருப்பதையும், அவற்றை எவ்வாறு கண்டறிவது என்பதையும்
அறிந்துகொள்வது நல்லது. அவைகளை பார்த்து பயப்பட வேண்டாம்!


** சரம்(Strings)
சி இல் சரங்கள் சுட்டிக்காட்டி வகை char* மூலம் குறிப்பிடப்படுகின்றன. அடிப்படையில்
அவை எழுத்துக்களின் பட்டியலாக(list) சேமிக்கப்படுகின்றன, அதன் இறுதில் சிறப்பு
எழுத்து பூஜ்ய முறிவு(Null terminator - \0) இருக்கும். சரங்கள் சி இன் சிக்கலான
மற்றும் முக்கியமான பகுதியாகும், அடுத்த சில அத்தியாயங்களில் திறம்பட பயன்படுத்த
கற்றுக்கொள்வோம்.

மேற்கோள் குறிகளுக்கு(Quotation marks) இடையில் உரையை(Text) வைப்பதன் மூலம்
சரங்களை அறிவிக்கலாம். இதை முந்தைய அத்தியாயத்தில் "Hello, World!" என்ற சரத்துடன்
பயன்படுத்தினோம். இப்போதைக்கு, char* ஐப் பார்த்தால், அதை ஒரு சரமாகப் படிக்கலாம்
என்பதை நினைவில் கொள்ளுங்கள்.

** நிபந்தனைகள்(Conditionals)

நிபந்தனை அறிக்கைகள் சில நிபந்தனைகள் பூர்த்தி செய்யப்பட்டால் மட்டுமே நிரல் சில
குறியீட்டை செயல்படுத்த அனுமதிக்கும்.

சில நிபந்தனைகளின் கீழ் குறியீட்டைச் செயல்படுத்த, if அறிக்கையைப்
பயன்படுத்துகிறோம். இது if என எழுதப்பட்டதைத் தொடர்ந்து
அடைப்புக்குறிக்குள்(Parentheses - ()) சில நிபந்தனைகள், அதைத் தொடர்ந்து சுருள்
அடைப்புக்குறிக்குள்(Curly brackets) செயல்படுத்த குறியீடு. if அறிக்கையைத்
தொடர்ந்து விருப்பம் இருந்தால் else அறிக்கை வரலாம். அதைத் தொடர்ந்து சுருள்
அடைப்புக்குறிக்குள்(Curly brackets) மற்ற அறிக்கைகளும் இருக்கும். நிபந்தனை
தவறானதாக இருந்தால், else அறிக்கையில் உள்ள குறியீடு செயல்படுத்தப்படும்.

ஏரண வினைப்(Logical operation) பயன்படுத்தி பல நிபந்தனைகளை நாம் சோதிக்கலாம்,
இதில் '||' என்றால் அல்லது, '&&' என்றால் மற்றும் என்று அர்த்தம்.

நிபந்தனை அறிக்கையின் அடைப்புக்குறிக்குள் பூஜ்ஜியம்(0) அல்லாத எந்த மதிப்பும் சரி என
மதிப்பிடப்படும். விஷயங்களை மறைமுகமாகச் சரிபார்க்க பல நிபந்தனைகள் இதைப்
பயன்படுத்துவதால் இதை நினைவில் கொள்வது அவசியம்.

x எனப்படும் ஒரு முழு எண்ணானது 10 ஐ விட அதிகமாகவும் 100 க்கு குறைவாகவும்
உள்ளதா என சரிபார்க்க விரும்பினால், பின்வருவனவற்றை எழுதுவோம்.

#+begin_src c
  if (x > 10 && x < 100) {
    puts("x is greater than 10 and less than 100!");
  } else {
    puts("x is less than 11 or greater than 99!");
  }
#+end_src

** சுழற்சி(Loops)
<h2 id='loops'>Loops</h2> <hr/>

<p>Loops allow for some code to be repeated until some condition
becomes false, or some counter elapses.</p>

<p>There are two main loops in C. The first is a <code>while</code>
loop. This loop repeatedly executes a block of code until some
condition becomes false. It is written as <code>while</code> followed
by some condition in parentheses, followed by the code to execute in
curly brackets. For example a loop that counts downward from
<code>10</code> to <code>1</code> could be written as follows.</p>

<pre><code data-language='c'>int i = 10; while (i > 0) { puts("Loop
Iteration"); i = i - 1; }</code></pre>

<p>The second kind of loop is a <code>for</code> loop. Rather than a
condition, this loop requires three expressions separated by
semicolons <code>;</code>. These are an <em>initialiser</em>, a
<em>condition</em> and an <em>incrementer</em>. The
<em>initialiser</em> is performed before the loop starts. The
<em>condition</em> is checked before each iteration of the loop. If it
is false, the loop is exited. The <em>incrementer</em> is performed at
the end of each iteration of the loop. These loops are often used for
counting as they are more compact than the <code>while</code>
loop.</p>

<p>For example to write a loop that counts up from <code>0</code> to
<code>9</code> we might write the following. In this case the
<code>++</code> operator increments the variable <code>i</code>.</p>

<pre><code data-language='c'>for (int i = 0; i < 10; i++) { puts("Loop
  Iteration"); }</code></pre>

** வெகுமதி மதிப்பெண் (Bonus Marks)
<h2>Bonus Marks</h2> <hr/>

<div class="alert alert-warning"> <ul class="list-group"> <li
  class="list-group-item">&rsaquo; Use a <code>for</code> loop to
  print out <code>Hello World!</code> five times.</li> <li
  class="list-group-item">&rsaquo; Use a <code>while</code> loop to
  print out <code>Hello World!</code> five times.</li> <li
  class="list-group-item">&rsaquo; Declare a function that outputs
  <code>Hello World!</code> <code>n</code> number of times. Call this
  from <code>main</code>.</li> <li class="list-group-item">&rsaquo;
  What built in types are there other than the ones listed?</li> <li
  class="list-group-item">&rsaquo; What other conditional operators
  are there other than <em>greater than</em> <code>&gt;</code>, and
  <em>less than</em> <code>&lt;</code>?</li> <li
  class="list-group-item">&rsaquo; What other mathematical operators
  are there other than <em>add</em> <code>+</code>, and
  <em>subtract</em> <code>-</code>?</li> <li
  class="list-group-item">&rsaquo; What is the <code>+=</code>
  operator, and how does it work?</li> <li
  class="list-group-item">&rsaquo; What is the <code>do</code> loop,
  and how does it work?</li> <li class="list-group-item">&rsaquo; What
  is the <code>switch</code> statement and how does it work?</li> <li
  class="list-group-item">&rsaquo; What is the <code>break</code>
  keyword and what does it do?</li> <li
  class="list-group-item">&rsaquo; What is the <code>continue</code>
  keyword and what does it do?</li> <li
  class="list-group-item">&rsaquo; What does the <code>typedef</code>
  keyword do exactly?</li> </ul> </div>

<h2>Navigation</h2>


<table class="table" style='table-layout: fixed;'> <tr> <td
  class="text-left"><a href="chapter2_installation"><h4>&lsaquo;
  Installation</h4></a></td> <td class="text-center"><a
  href="contents"><h4>&bull; Contents &bull;</h4></a></td> <td
  class="text-right"><a href="chapter4_interactive_prompt"><h4>An
  Interactive Prompt &rsaquo;</h4></a></td> </tr> </table>
