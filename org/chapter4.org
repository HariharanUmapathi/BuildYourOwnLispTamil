* அத்தியாயம் 3 - கலந்துரையாடல் தூண்டி (Interactive Prompt)

** வாசிப்பு ,மதிப்பீடு, அச்சிடு (Read, Evaluate, Print)

நீங்கள் நிரலாக்க மொழியை உருவாக்கும்போது, ​​அதனுடன் கலந்துரையாடுவதற்கு சில வழிகள்
தேவைப்படும். சி ஒரு நிரல்மொழிமாற்றி(compiler)யை பயன்படுத்துகிறது, அங்கு நீங்கள் நிரலை
மாற்றி, அதை மீண்டும் நிரல்மொழிமாற்றி(recompile) இயக்கலாம். நாம் ஏதாவது சிறப்பாகச்
செய்து, மாறும் மொழியுடன் தொடர்பு கொண்டால் நன்றாக இருக்கும். அதன்பிறகு பல
நிபந்தனைகளின் கீழ் அதன் நடத்தையை மிக விரைவாகச் சோதிக்கிறோம். இதற்கு நாம்
கலந்துரையாடல் தூண்டி என்று ஒன்றை உருவாக்கலாம்.

இது சில உள்ளீட்டிற்கு பயனரைத் தூண்டும்(Prompts the user) ஒரு நிரலாகும், மேலும்
இது வழங்கப்படும் போது, ​​சில தகவல்களுடன் மீண்டும் பதிலளிக்கும். இதைப் பயன்படுத்துவது
மூலம் நமது நிரலாக்க மொழியைச் சோதிப்பதற்கும் அது எவ்வாறு செயல்படுகிறது என்பதைப்
பார்ப்பதற்கும் எளிதான வழியாகும். இந்த அமைப்பு REPL என்றும் அழைக்கப்படுகிறது, இது
வாசிப்பு-மதிப்பீடு-அச்சு சுழற்சியைக்(Read Evaluate Print Loop)
குறிக்கிறது. நிரலாக்க மொழியுடன் கலந்துரையாடுவதற்கு பொதுவாக இம்முறை
பயன்படுத்தபடுகிறது, நீங்கள் பைத்தானைப் போன்ற நிரல்மொழி பயன்படுத்தியிருந்தால்
அறிந்திருக்க வாய்ப்பு உண்டு.

முழு REPL ஐ உருவாக்குவதற்கு முன், எளிமையான ஒன்றைத் தொடங்குவோம். பயனரைத்
துண்டில்(User prompts) தந்த எந்த உள்ளீட்டையும் அதை நேராக எதிரொலிக்கும்(echo) ஒரு
அமைப்பை நாம் உருவாக்கப் போகிறோம். இதை நாம் உருவாக்கினால், பின்னர் பயனர் உள்ளீட்டைப்
பாகுபடுத்துவதற்கும்(Parse), உண்மையான லிஸ்ப்(Lisp) நிரலைப் போல மதிப்பிடுவதற்கும்
அதை நீட்டிக்கலாம்(Extend).

** ஒரு கலந்துரையாடல் தூண்டி (An Interactive Prompt)

அடிப்படையாக நாம் ஒரு சுழற்சியை(loop) எழுத வேண்டும், இது ஒரு தகவலை மீண்டும்
மீண்டும் எழுதுகிறது, பின்னர் சில உள்ளீடுகளுக்காக(input)
காத்திருக்கிறது. பயனர்(User) உள்ளீட்டைப் பெற, fgets எனப்படும் செயல்பாட்டைப்
பயன்படுத்தலாம், இது ஒரு புதிய வரி(New line) வரை எந்த உள்ளீட்டையும்
படிக்கும். இந்த பயனர் உள்ளீட்டைச் நாம் எங்காவது சேமிக்க வேண்டும். இதற்காக நாம்
நிலையான அளவு(Constantly sized) உள்ளீட்டு இடையகத்தை(Input buffer)
அறிவிக்கலாம்.

பயனர் உள்ளீடு சேமிக்கப்பட்டவுடன், printf எனப்படும் செயல்பாட்டைப்
பயன்படுத்தி பயனருக்கு மீண்டும் அச்சிடலாம்.

#+begin_src c
  #include <stdio.h>

  /* 2048 அளவு கொண்ட இடையகத்தை(Buffer) அல்லது அணி(Array), பயனர் உள்ளீட்டிற்காக அறிவிக்கவும் */
  static char input[2048];
  
  int main(int argc, char** argv) {
  
    /* பதிப்பை(version) அச்சிட்டு(print) வெளியேறவும் */
    puts("Lispy Version 0.0.0.0.1");
    puts("Press Ctrl+c to Exit\n");
  
    /* முடிவில்லாத சுழற்சியில் */
    while (1) {
  
      /* வெளியீட்டு தூண்டு (Output prompt) */
      fputs("lispy> ", stdout);
  
      /* அதிகபட்சம் 2048 அளவு கொண்ட பயனர் உள்ளீட்டின் வரியைப் படிக்கவும் */
      fgets(input, 2048, stdin);
  
      /* பயனருக்கு உள்ளீட்டை மீண்டும் அச்சிடவும் */
      printf("No you're a %s", input);
    }
  
    return 0;
  }
#+end_src

- அந்த //* *// இடையில் உள்ளை உரை என்ன செய்கிறது ?
  - மேலே உள்ள குறியீட்டில்(Code) விளக்கக்குறிப்பு(Comments) உள்ளது.
  - இவை //* *// குறியீடுகளுக்கு இடையே உள்ள குறியீட்டின் பிரிவுகள்
    (code section), அவை நிரல்மொழிமாற்றியல் புறக்கணிக்கப்படுகின்றன, ஆனால்
    என்ன நடக்கிறது என்பதைப் படிக்கும் நபருக்குத் தெரிவிக்கப் பயன்படுகிறது.
  - அவைகளை கவனிக்கவும்.

இந்த நிரலை இன்னும் கொஞ்சம் ஆழமாகப் பார்ப்போம்.

இந்த வரி static char input[2048]; 2048 எழுத்துக்கள் கொண்ட முழுதளாவிய
அணியை(global array) அறிவிக்கிறது. இது ஒரு ஒதுக்கப்பட்ட(reserved) தரவுத்
தொகுதியாகும்(Code blocks), இதை நம் நிரலில் இருந்து எங்கும் அணுகலாம். நாம்
இதில் கட்டளை வரியில் தட்டச்சு செய்யப்பட்ட பயனர் உள்ளீட்டை(User input) சேமிக்கப்
போகிறோம். Static சிறப்புச்சொல் இந்தக் கோப்பில் முழுதளாவிய மாறியை(global
variable) உருவாக்குகிறது, மேலும் [2048] பகுதி அளவை(size) அறிவிக்கும்.

நாம் while(1), வரை சுழற்சி(While loop) பயன்படுத்தி ஒரு முடிவிலா
சுழற்சியை(Infinite loop) எழுதுகிறோம். இதில் 1 என்று சுழற்சி அடைப்புக்குறிக்குள்
எழுதி இருக்கிறோம் அதற்கு நிபந்தனை உண்மை என்று அர்த்தம். எனவே இந்த சுழற்சியில் உள்ள
கட்டளைகள் எப்போதும் இயங்கும்.

நாம் தூண்டி வெளியிட, fputs செயல்பாட்டைப் பயன்படுத்துகிறோம். இது puts போல தான்
ஆனால் சிறிய மாறுபாடு புதிய வரி எழுத்தைச் சேர்க்காது. கட்டளை
வரியிலிருந்து(Command Prompt) பயனர் உள்ளீட்டைப் பெற fgets செயல்பாட்டைப்
பயன்படுத்துகிறோம். இந்த இரண்டு செயல்பாடுகளுக்கும் சில கோப்புகளை(File) எழுத
அல்லது படிக்க பயன்படுத்தப்படுகிறது. இதற்காக stdin மற்றும் stdout ஆகிய சிறப்பு
மாறிகளை பயன்படுத்துகிறோம். இவை <stdio.h> இல் அறிவிக்கப்பட்டு உள்ளது,இது கட்டளை
வரியில் இருந்து உள்ளீடு மற்றும் வெளியீட்டைக் குறிக்கும் சிறப்பு கோப்பு மாறிகள்
ஆகும். இந்த மாறியை fgets செயல்பாடுகு அளபுருக(Parameter) கூடுதல் அது பயனர்
உரையின் வரியை உள்ளிடுவதற்கு காத்திருக்கும், உள்ளீட்டு வந்தபின் அதை
இடையகத்தில்(Buffer) புதிய வரி எழுத்துடன் சேர்த்து சேமிக்கும். fgets அதிக
தரவுகளைப் படிக்காதபடி இருக்க, இடையக(Buffer) 2048 என்ற அளவையும் வழங்க வேண்டும்.

பயனருக்கு செய்தியை எதிரொலிக்க நாம் printf செயல்பாட்டைப் பயன்படுத்துகிறோம். இது
பல கூறுகளைக்(elements) கொண்ட செய்திகளை அச்சிடுவதற்கான வழியை வழங்கும் ஒரு
செயல்பாடாகும். கொடுக்கப்பட்ட சரத்தில் உள்ள மாதிரிக்கு(pattern)
தருமதிப்பு(arguments) பொருந்துகிறது. எடுத்துக்காட்டாக, கொடுக்கப்பட்ட சரத்தில் %s
மாதிரியைக் காணலாம். அதாவது, அடுத்ததாக எந்த தருமதிப்பு அனுப்பப்பட்டாலும், அது
ஒரு சரமாக விளக்கப்படும்.

இந்த வெவ்வேறு மாதிரிகள் பற்றிய கூடுதல் தகவலுக்கு, printf இல் உள்ள [[http://en.cppreference.com/w/c/io/printf][ஆவணங்களைப்]]
பார்க்கவும்.

- fgets மற்றும் printf போன்ற செயல்பாடுகளை பற்றி நான் எப்படி தெரிந்து கொள்ள வேண்டும்?
  - இந்த நிலையான செயல்பாடுகளைப் பற்றி எப்படி அறிந்து கொள்வது, எப்போது அவற்றைப்
    பயன்படுத்துவது என்பது உடனடியாகத் தெரியாது. ஒரு சிக்கலை எதிர்கொள்ளும் போது,
    ​​நூலக செயல்பாடுகளால் அது ஏற்கனவே தீர்க்கப்பட்டது என்பதை அறிய அனுபவம் தேவை.
  - அதிர்ஷ்டவசமாக சி ஒரு சிறிய நிலையான நூலகத்தைக் கொண்டுள்ளது மற்றும் கிட்டத்தட்ட
    அனைத்தையும் நடைமுறையில் கற்றுக்கொள்ளலாம். நீங்கள் மிகவும் அடிப்படையான அல்லது
    அடிப்படையானதாகத் தோன்றும் ஒன்றைச் செய்ய விரும்பினால், நிலையான நூலகத்திற்கான
    குறிப்பு [[https://en.cppreference.com/w/c][ஆவணங்களைப்]] பார்த்து, நீங்கள் விரும்பியதைச் செய்யும் செயல்பாடுகள் ஏதேனும்
    உள்ளதா எனச் சரிபார்க்க வேண்டும்.

** நிரல்மொழிமாற்றுதல் (Compilation)

இரண்டாவது அத்தியாயத்தில் பயன்படுத்தப்பட்ட அதே கட்டளையுடன் இதை நீங்கள்
நிரல்மொழிமாற்றலாம்.

#+begin_src shell
  cc -std=c99 -Wall prompt.c -o prompt
#+end_src

இதை நிரல்மொழிமாற்றிய பிறகு நீங்கள் இதை இயக்க முயற்சிக்க வேண்டும். முடித்ததும்
நிரலிலிருந்து வெளியேற Ctrl+c ஐப் பயன்படுத்தலாம். எல்லாம் சரியாக இருந்தால், உங்கள்
நிரல் கீழே உள்ளதைப் போல இருக்க வேண்டும்.

#+begin_example
Lispy Version 0.0.0.0.1
Press Ctrl+c to Exit

lispy> hello
No you're a hello
lispy> my name is Dan
No you're a my name is Dan
lispy> Stop being so rude!
No you're a Stop being so rude!
lispy>
#+end_example

** உள்ளீடு திருத்துதல் (Editing Input)
நீங்கள் லினக்ஸ்(Linux) அல்லது மேக்(Mac) இல் பயன்படுத்துகிறீர்கள் என்றால், உங்கள்
உள்ளீட்டைத் திருத்துவதற்கு அம்புக்குறி விசைகளைப்(Arrow Keys) பயன்படுத்தும்போது சில
வித்தியாசமான நடத்தைகளைக் காண்பீர்கள்.

#+begin_example
Lispy Version 0.0.0.0.3
Press Ctrl+c to Exit

lispy> hel^[[D^[[C
#+end_example

அம்புக்குறி விசைகளைப் பயன்படுத்தும்போது, உள்ளீட்டில் காட்டியை(Cursor)
நகர்த்துவதற்குப் பதிலாக, இந்த வித்தியாசமான எழுத்துக்களை ^[[D அல்லது ^[[C
உருவாக்குகிறது. நாம் உண்மையில் விரும்புவது என்னவென்றால், வரியில் சுற்றிச்
நகர(Move around the line), நாம் தவறு செய்தால் உள்ளீட்டை நீக்குதல் மற்றும்
திருத்துதல்.

விண்டோஸில் இந்த நடத்தை இயல்புநிலையாகும். லினக்ஸ் மற்றும் மேக்கில் இது Editline
எனப்படும் நூலகத்தால் வழங்கப்படுகிறது. லினக்ஸ் மற்றும் மேக்கில், இந்த நூலகம் வழங்கும்
செயல்பாடுகளுக்கான அழைப்புகளை fputs மற்றும் fgetsக்கு மாற்றாக பயன்படுத்துத
வேண்டும்.

நீங்கள் விண்டோஸில் உருவாக்கினால், அடுத்த சில பகுதிகள் பொருத்தமானதாக இருக்காது
என்பதால், இந்த அத்தியாயத்தின் இறுதிக்கு செல்லவும்.

*** Editline பயன்படுத்துதல்

Editline நூலகம் readline மற்றும் add_history எனப்படும் இரண்டு செயல்பாடுகளை
வழங்குகிறது. இதில் முதல் செயல்பாடு, readline சில துண்டில் இருந்து உள்ளீட்டை
படிக்க பயன்படுத்தப்படுகிறது, அதே நேரத்தில் அந்த உள்ளீட்டைத் திருத்த
அனுமதிக்கிறது. இரண்டாவது செயல்பாடு add_history உள்ளீடுகளின் வரலாற்றைப்
பதிவுசெய்ய உதவுகிறது, இதனால் அவை மேல் மற்றும் கீழ் அம்புக்குறி விசைகளை வைத்து
மீட்டெடுக்கப்படும்.

மேலே உள்ள அம்சத்தைப் பெற, fputs மற்றும் fgetகளை இந்த செயல்பாடுகளுக்கான
அழைப்புகளுடன் மாற்றுவோம்.

#+begin_src c
  #include <stdio.h>
  #include <stdlib.h>
  
  #include <editline/readline.h>
  #include <editline/history.h>
  
  int main(int argc, char** argv) {
  
    /* பதிப்பை(version) அச்சிட்டு(print) வெளியேறவும் */
    puts("Lispy Version 0.0.0.0.1");
    puts("Press Ctrl+c to Exit\n");
  
    /* முடிவில்லாத சுழற்சியில் */
    while (1) {
  
      /* வெளியீட்டு தூண்டு (Output prompt) மற்றும் உள்ளீடு வாங்குதல் */
      char* input = readline("lispy> ");
  
      /* வரலாற்றில் உள்ளீட்டைச் சேர்க்கவும் */
      add_history(input);
  
      /* பயனருக்கு உள்ளீட்டை மீண்டும் அச்சிடவும் */
      printf("No you're a %s\n", input);
  
      /* வாங்கப்பட்ட உள்ளீடை விடுக்க */
      free(input);
  
    }
  
    return 0;
  }
#+end_src

சில புதிய தலைப்புகளைச்(Headers) சேர்த்துள்ளோம். #include <stdlib.h> உள்ளது,
இது குறியீட்டில் பின்னர் பயன்படுத்தப்படும் free செயல்பாட்டிற்கான அணுகலை(access)
வழங்குகிறது. நாங்கள் #include <editline/readline.h> மற்றும் #include
<editline/history.h> ஆகியவற்றையும் சேர்த்துள்ளோம், இது Editline செயல்பாடுகள்,
readline மற்றும் add_history ஆகியவற்றிற்கான அணுகலை வழங்குகிறது.

தூண்டி(Prompt) அச்சிட்டு, fgets மூலம் உள்ளீடு பெறுவதற்குப் பதிலாக, readline
பயன்படுத்தி ஒரே நேரத்தில் அதைச் செய்கிறோம். இதன் விளைவாக, அதை பதிவு(record)
செய்ய add_history க்கு செல்கிறோம். இறுதியாக நாம் printf ஐப் பயன்படுத்தி அதை
அச்சிடுகிறோம்.

fgets போலல்லாமல், readline செயல்பாடு உள்ளீடிலிருந்து புதிய வரி எழுத்தை
நீக்குகிறது, எனவே இதை நாம் நமது printf செயல்பாட்டில் சேர்க்க வேண்டும். free
பயன்படுத்தி readline செயல்பாடு மூலம் நமக்கு வழங்கப்பட்ட உள்ளீட்டையும் நீக்க
வேண்டும். ஏனென்றால், ஏற்கனவே உள்ள சில இடையகங்களுக்கு(Buffer) எழுதும் fgets
போலல்லாமல், readline செயல்பாடு அழைக்கும் பொது புதிய நினைவகத்தை(Memory)
ஒதுக்குகிறது. நினைவகத்தை எப்போது விடுவிப்பது என்பதை பற்றி அடுத்த அத்தியாயங்களில்
நாம் ஆழமாகப் பேசுவோம்.

*** Editline வைத்து நிரல்மொழிமாற்றுதல்

முந்தைய கட்டளையுடன் இதை நிரல்மொழிமாற்றினால் உங்களுக்கு ஒரு பிழையைப்
வரும். ஏனென்றால் முதலில் உங்கள் கணினியில் Editline நூலகத்தை நிறுவ வேண்டும்.

#+begin_example
fatal error: editline/readline.h: No such file or directory #include <editline/readline.h>
#+end_example

மேக் இல் Editline நூலகம் கட்டளை வரி கருவிகளுடன் வருகிறது. இவற்றை
நிறுவுவதற்கான வழிமுறைகளை அத்தியாயம் 2 இல் காணலாம். history தலைப்பு
கண்டறியப்படவில்லை என்பது குறித்த பிழையைப் பெறலாம். அப்படி வந்தால் #include
<editline/history.h> என்ற வரியை அகற்றவும், ஏனெனில் இந்த தலைப்பு தேவையில்லை.

லினக்ஸ் இல் நீங்கள் sudo apt-get install libedit-dev உடன் Editline
நிறுவலாம். Fedora வில் நீங்கள் su -c "yum install libedit-dev*" என்ற
கட்டளையைப் பயன்படுத்தலாம்.

நீங்கள் Editline நிறுவியவுடன் அதை மீண்டும் நிரல்மொழிமாற்ற முயற்சி செய்யலாம். இந்த
முறை உங்களுக்கு வேறு பிழையைப் வரும்.

#+begin_example
undefined reference to `readline'
undefined reference to `add_history'
#+end_example

உங்கள் நிரலை நீங்கள் Editline இணைக்கவில்லை(linking) என்று அர்த்தம். இந்த இணைக்கும்
செயல்முறை நிரல்மொழிமாற்றியை நேரடியாக உங்கள் நிரலில் Editline அழைப்புகளை
உட்பொதிக்க அனுமதிக்கிறது. வெளியீட்டு கொடிக்கு(Output flags) சற்று முன், உங்கள்
நிரல்மொழிமாற்ற கட்டளையில் கொடி(Compiler flags) -ledit ஐ சேர்ப்பதன் மூலம் இதை
இணைக்கலாம்.

*** அது இன்னும் வேலை செய்யவில்லை!

சில அமைப்புகள்(System) Editline எவ்வாறு நிறுவுவது, சேர்ப்பது மற்றும் இணைப்பது
என்பதில் சிறிய மாறுபாடுகள் இருக்கலாம். எடுத்துக்காட்டாக ஆர்ச் லினக்ஸில்(Arch
Linux) Editline வரலாறு தலைப்பு histedit.h யில் இருக்கும். இணையத்தில் தேடுவது
சிக்கல் இருந்தால், Editline நூலகம் எவ்வாறு நிறுவுவது மற்றும் பயன்படுத்துவது
என்பது குறித்த விநியோக(Distribution) குறிப்பிட்ட வழிமுறைகளை நீங்கள்
கண்டுபிடிக்க முடியுமா என்று பார்க்கவும். அது தோல்வியுற்றால், Readline நூலகம் உள்ள
வழிமுறைகளைத் தேடவும். இது Editline கு மாற்றாகும். மேக் இல் HomeBrew அல்லது
MacPorts ஐப் பயன்படுத்தி நிறுவலாம்.

** சி முன்செயலி (The C Preprocessor)

இது போன்ற ஒரு சிறிய திட்டத்திற்கு நாம் எந்த இயக்கு தளத்தை பயன்படுத்துகிறோம்
என்பதைப் பொறுத்து வித்தியாசமாக நிரல் எழுத வேண்டும். ஆனால் எனது மூலக்
குறியீட்டை(Source code) வேறொரு இயக்குதளத்தில் உள்ள நண்பருக்கு அனுப்ப
விரும்பினால், நிரலாக்கத்தில் அது சிக்கலை ஏற்படுத்தும். ஒரு சிறந்த உலகில் எனது
மூலக் குறியீடு இங்கு, அல்லது எந்த கணினியில் நிரல்மொழிமாற்றினாலும் நிரல்மொழிமாற்ற
முடியும் என்று நான் விரும்புகிறேன். இது சி இல் உள்ள பொதுவான பிரச்சனையாகும்,
மேலும் இது பெயர்வுத்திறன்(portability) என்று அழைக்கப்படுகிறது. இதற்கு எளிதான அல்லது சரியான
தீர்வு இல்லை.

ஆனால் சி யில் உதவ ஒரு பொறிமுறையை(Mechanism) வழங்குகிறது, இது
முன்செயலி(Preprocessor) என்று அழைக்கப்படுகிறது. முன்செயலி என்பது
நிரல்மொழிமாற்றி முன் இயங்கும் ஒரு நிரலாகும். இது பல நோக்கங்களைக்(Purpose)
கொண்டுள்ளது, மேலும் நாம் அதை அறியாமலேயே ஏற்கனவே பயன்படுத்தி வருகிறோம். பவுண்டு
(விசை) octothorpe # எழுத்துடன் தொடங்கும் எந்த வரியும் (# ஹாஷ், Hash என்றும்
அழைப்பர்) ஒரு முன்செயலி கட்டளை. தலைப்புக் கோப்புகளைச் சேர்க்க இதைப்
பயன்படுத்துகிறோம், தரநிலை(Standard) நூலகம் மற்றும் பிறவற்றிலிருந்து
செயல்பாடுகளுக்கான அணுகலை நம்மக்கு வழங்குகிறது.

முன்செயலியின் மற்றொரு பயன் என்னவென்றால், குறியீடு எந்த இயக்கு தளத்தில்
நிரல்மொழிமாற்றுகிறது என்பதைக் கண்டறிந்து, வெவ்வேறு குறியீட்டை வெளியிட இதைப்
பயன்படுத்தப்படுகிறது.

இதைத்தான் நாம் பயன்படுத்தப் போகிறோம். நாம் விண்டோஸ் இயக்கினால், நான் தயாரித்த சில
போலியான readline மற்றும் add_history செயல்பாடுகளுடன் கூடிய குறியீட்டை
முன்செயலி வெளியிட அனுமதிக்கப் போகிறோம், இல்லையெனில் Editline நூலகத்தில் இருந்து
தலைப்புகளைச் சேர்த்து அவற்றைப் பயன்படுத்துவோம்.

நிரல்மொழிமாற்றி எந்த குறியீட்டை வெளியிட வேண்டும் என்பதை அறிவிக்க, அதை #ifdef,
#else மற்றும் #endif முன்செயலி அறிக்கைகளில் மடிக்கலாம். குறியீடு
நிரல்மொழிமாற்றிக்கு முன் நடக்கும் if செயல்பாடு போன்றது. நிபந்தனை உண்மையாக
இருந்தால், கோப்பின் முதல் #ifdef முதல் அடுத்த #else வரையிலான அனைத்து
உள்ளடக்கங்களும் பயன்படுத்தப்படும், இல்லையெனில் #else முதல் இறுதி #endif வரை உள்ள
அனைத்து உள்ளடக்கங்களும் அதற்குப் பதிலாகப் பயன்படுத்தப்படும். எங்கள் போலி செயல்பாடுகள்,
editline தலைப்புகளைச் சுற்றி இவற்றை வைப்பதன் மூலம், உமிழப்படும்(Emitted)
குறியீடு விண்டோஸ், லின்க்ஸ் அல்லது மேக் இல் நிரல்மொழிமாற்ற முடியும்.

#+begin_src c
  #include <stdio.h>
  #include <stdlib.h>
  
  /* நாம் விண்டோஸில் நிரல்மொழிமாற்றுதல் என்றால் இந்த செயல்பாடுகளை நிரல்மொழிமாற்றவும் */
  #ifdef _WIN32
  #include <string.h>
  
  static char buffer[2048];
  
  /* போலி readline செயல்பாடு */
  char* readline(char* prompt) {
    fputs(prompt, stdout);
    fgets(buffer, 2048, stdin);
    char* cpy = malloc(strlen(buffer)+1);
    strcpy(cpy, buffer);
    cpy[strlen(cpy)-1] = '\0';
    return cpy;
  }
  
  /* போலி add_history செயல்பாடு */
  void add_history(char* unused) {}
  
  /* இல்லையெனில் Editline தலைப்புகளைச் சேர்க்கவும் */
  #else
  #include <editline/readline.h>
  #include <editline/history.h>
  #endif
  
  int main(int argc, char** argv) {
  
    puts("Lispy Version 0.0.0.0.1");
    puts("Press Ctrl+c to Exit\n");
  
    while (1) {
  
      /* இப்போது இரண்டிலும் readline சரியாக வரையறுக்கப்படும் */
      char* input = readline("lispy> ");
      add_history(input);
  
      printf("No you're a %s\n", input);
      free(input);
  
    }
  
    return 0;
  }
#+end_src

** வெகுமதி மதிப்பெண் (Bonus Marks)
- தூண்டு, lispy> என்பதிலிருந்து உங்கள் விருப்பத்திற்கு மாற்றவும்.
- பயனருக்கு எதிரொலிப்பதை மாற்றவும்.
- பதிப்பில் கூடுதல் தகவல் செய்தியைச் சேர்க்கவும் பின்பு வெளியேறவும்.
- அந்த சரங்களில் \n என்றால் என்ன?
- printf உடன் வேறு என்ன மாதிரிகளைப்(Pattern) பயன்படுத்தலாம்?
- ஒரு பொருந்தாத மாதிரி(Pattern) மாறியை printf யில் அனுப்பினால் என்ன நடக்கும்?
- #ifndef முன்செயலி கட்டளை என்ன செய்கிறது?
- முன்செயலி கட்டளை #define என்ன செய்கிறது?
- விண்டோஸ் இல் _WIN32 வரையறுக்கப்பட்டால், Linux அல்லது Mac க்கு என்ன வரையறுக்கப்படுகிறது?
  
